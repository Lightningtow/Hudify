plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "maven.modrinth:customhud:${project.customhud_version}+${project.minecraft_version}"
	//modImplementation "com.minenash:customhud:${project.customhud_version}+${project.minecraft_version}"

	//include "com.minenash:customhud-${project.customhud_version}+${project.minecraft_version}"
	//include(modImplementation("com.minenash:customhud:3.3.0+1.20.4"))
//	include(modImplementation("com.minenash:customhud:3.3.0+1.20.4"))

}
//def fabricModInfoJson(ArrayList<CompatLayer> layers) {
//	def modid
//	def name
//	def description
//
//	if (layers.size() > 1) {
//		modid = "compat"
//		name = "Mod"
//		description = "Loads extra variables for CustomHUD from supported mods: ${layers.collect({ layer -> layer.name }).join(", ")}"
//	} else {
//		modid = layers[0].modid
//		name = layers[0].name
//		description = "Loads extra variables for CustomHUD from the ${layers[0].name} mod"
//	}
//
//	Map info = [
//			schemaVersion: 1,
//			id: "customhud_${modid}",
//			version: "${version}",
//			name: "CustomHUD (${name} Compatibility)",
//			description: description,
//			authors: [
//					"Public Domain"
//			],
//			contact: [
//					homepage: "fillme",
//					sources: "fillme"
//			],
//			license: "CC0-1.0",
//			icon: "assets/customhud_compat/icon.png",
//			environment: "*",
//			entrypoints: [
////					client: layers.collect {layer -> "lightningtow.hudify.CustomHUD." + layer.dir + ".Layer"}
//			],
//			depends: [
//					java: ">=17",
//					minecraft: "~${project.minecraft_version}",
//					"fabric-api": "*",
//					fabricloader: "*",
//					"custom_hud": ">=2.0.0",
//			]
//	]
//
//	if (layers.size() == 1) {
//		info.depends += [ "${layers[0].modid}": "*" ]
//	}
//
//	return info
//}

//class CompatLayer {
//	String name // fancy name
//	String dir  // layer directory
//	String[] extra // extra classes to include
//	String modid // layer"s modid
//}
//
//ext.layers = [
//	//	new CompatLayer(name: "Tweakeroo", dir: "Tweakeroo", extra: [ "MalilibUtils" ], modid: "tweakeroo"),
//	//	new CompatLayer(name: "Litematica", dir: "Litematica", extra: [ "MalilibUtils" ], modid: "litematica"),
//	//	new CompatLayer(name: "Hudify", dir: "Hudify", extra: [], modid: "hudify")
//]
//
//ext.layers.each { layer ->
//	def configName = layer.dir[0].toLowerCase() + layer.dir[1..-1]
//	tasks.create(name: "generate${layer.dir}Json", type: DefaultTask) {
//		dependsOn processResources
//		def outputJsonFile = file("build/client/resources/fabric-${layer.modid}.mod.json")
//		def outputJson = fabricModInfoJson([layer])
//		outputs.file outputJsonFile
//
//		doLast {
//			outputJsonFile.text = new groovy.json.JsonBuilder(outputJson).toPrettyString()
//		}
//	}
//
//	tasks.create(name: "${configName}Jar", type: Jar) {
//		dependsOn "generate${layer.dir}Json"
//		archiveBaseName = "CustomHUD+${layer.dir}"
//
//		if (configurations.findByName(configName)) {
//			from configurations."${configName}"
//			compileClientJava {
//				doFirst {
//					sourceSets.client.java.srcDirs += "build/generated/sources/client/java/main/lightningtow/hudify/CustomHUD/${layer.dir}"
//					classpath += configurations."${configName}"
//				}
//			}
//		}
//
//		def fabricModJson = "fabric-${layer.modid}.mod.json"
//		from ("build/client/resources/") {
//			include fabricModJson
//			into "/"
//			rename { String fileName -> fileName.replace(fabricModJson, "fabric.mod.json") }
//		}
//
//		from ("src/client/resources/") {
//			include "assets/customhud_compat/icon.png"
//		}
//
//		def basePath = "lightningtow/hudify/CustomHUD/"
//		include "${basePath}/${layer.dir}/*"
//		include "${basePath}/util/CommonUtil.class"
//		from (sourceSets.client.output) {
//			layer.extra.flatten().each { name ->
//				include "${basePath}/util/${name}.class"
//				include "${basePath}/util/${name}\$*.class"
//			}
//		}
//		from("LICENSE")
//	}
//	build.dependsOn "${configName}Jar"
//}

tasks.register("setupGeneratedSources") {
	doLast {
		layers.each { layer ->
			sourceSets.client.java.srcDirs += "build/generated/sources/client/java/main/lightningtow/hudify/CustomHUD/${layer.dir}"
		}
	}
}

//tasks.named("compileClientJava") {
//	dependsOn "setupGeneratedSources"
//}

tasks.create(name: "generateModInfoJson", type: DefaultTask) {
	doLast {
		def output = file("build/resources/client/fabric.mod.json")
		mkdir output.parentFile
		output.text = new groovy.json.JsonBuilder(fabricModInfoJson(layers)).toPrettyString()
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}